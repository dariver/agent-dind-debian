#!/bin/bash
set -e

export DOCKER_HOST=unix:///var/run/docker.sock
DOCKER_OPTS="${DOCKER_OPTS:-"-H $DOCKER_HOST --bip=192.168.0.1/24"}"

if [ "${AUTOCONFIGURE_DOCKER_STORAGE}" = "true" ]
then
  if [ -f "/proc/filesystems" ]
  then
    if [ "$(grep overlay /proc/filesystems)" ]
    then
      STORAGE_DRIVER="overlay2"
    elif [ "$(grep aufs /proc/filesystems)" ]
    then
      STORAGE_DRIVER="aufs"
    else
      STORAGE_DRIVER="vfs"
    fi
    DOCKER_OPTS+=" --storage-driver ${STORAGE_DRIVER}"
  fi
fi

echo "==> Launching the Docker daemon..."

#/usr/local/bin/dockerd-entrypoint.sh ${DOCKER_OPTS} >/docker.log 2>&1 &
dind dockerd $DOCKER_OPTS > /tmp/docker.log 2>&1 &
while(! docker info > /dev/null 2>&1); do
    echo "==> Waiting for the Docker daemon to come online..."
    sleep 1
done
echo "== Docker Engine started and ready"

# Load any "tar-gzipped" Docker image from the local cache
if [ -n "${DOCKER_IMAGE_CACHE_DIR}" ] && [ -d "${DOCKER_IMAGE_CACHE_DIR}" ]
then
  echo "== Variable 'DOCKER_IMAGE_CACHE_DIR' found and pointing to an existing Directory"
  echo "== Loading following .tar files in Docker:"
  find "${DOCKER_IMAGE_CACHE_DIR}" -type f -name "*.gz" -print \
    -exec sh -c 'gunzip --stdout "$1" | docker load' -- {} \;
fi

# second argument is the java command line generated by CJE (passed as a single arg)
shift
echo "== Launching the following user-provided command: ${*}"
  exec /bin/sh -c "$@"